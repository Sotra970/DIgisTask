// Generated by Dagger (https://google.github.io/dagger).
package sotra.i.chachingdemo.di;

import android.app.Activity;
import android.app.Application;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModel;
import com.android.example.github.api.ApiService;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import sotra.i.chachingdemo.ApplicationC;
import sotra.i.chachingdemo.ApplicationC_MembersInjector;
import sotra.i.chachingdemo.MainActivity;
import sotra.i.chachingdemo.MainActivity_MembersInjector;
import sotra.i.chachingdemo.ui.DataViewModel;
import sotra.i.chachingdemo.ui.DataViewModel_Factory;
import sotra.io.digistask.repo.DataRepo_Factory;
import sotra.io.digistask.ui.ChartsFragment;
import sotra.io.digistask.ui.ChartsFragment_MembersInjector;
import sotra.io.digistask.ui.DataListFragment.DataListFragment;
import sotra.io.digistask.ui.DataListFragment.DataListFragment_MembersInjector;
import sotra.io.digistask.util.ViewModelFactory;
import sotra.io.digistask.util.ViewModelFactory_Factory;

public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private DataRepo_Factory dataRepoProvider;

  private DataViewModel_Factory dataViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {

    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(
        MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf(),
        Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.provideApiServiceProvider =
        DoubleCheck.provider(AppModule_ProvideApiServiceFactory.create(builder.appModule));
    this.dataRepoProvider = DataRepo_Factory.create(provideApiServiceProvider);
    this.dataViewModelProvider = DataViewModel_Factory.create(dataRepoProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1)
            .put(DataViewModel.class, (Provider) dataViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(ApplicationC application) {
    injectApplicationC(application);
  }

  private ApplicationC injectApplicationC(ApplicationC instance) {
    ApplicationC_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, MainActivity.class);
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent.Builder>
        chartsFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent.Builder>
        dataListFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {

      initialize(builder);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3)
          .put(
              MainActivity.class,
              (Provider) DaggerAppComponent.this.mainActivitySubcomponentBuilderProvider)
          .put(ChartsFragment.class, (Provider) chartsFragmentSubcomponentBuilderProvider)
          .put(DataListFragment.class, (Provider) dataListFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf(),
          Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.chartsFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent.Builder
                get() {
              return new ChartsFragmentSubcomponentBuilder();
            }
          };
      this.dataListFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent
                    .Builder
                get() {
              return new DataListFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      MainActivity_MembersInjector.injectViewModelFactory(
          instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
      return instance;
    }

    private final class ChartsFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent.Builder {
      private ChartsFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent build() {
        Preconditions.checkBuilderRequirement(seedInstance, ChartsFragment.class);
        return new ChartsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ChartsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ChartsFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeDataFragment.ChartsFragmentSubcomponent {
      private ChartsFragmentSubcomponentImpl(ChartsFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(ChartsFragment arg0) {
        injectChartsFragment(arg0);
      }

      private ChartsFragment injectChartsFragment(ChartsFragment instance) {
        ChartsFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class DataListFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent
            .Builder {
      private DataListFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent
          build() {
        Preconditions.checkBuilderRequirement(seedInstance, DataListFragment.class);
        return new DataListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DataListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DataListFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeListDataFragment.DataListFragmentSubcomponent {
      private DataListFragmentSubcomponentImpl(DataListFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DataListFragment arg0) {
        injectDataListFragment(arg0);
      }

      private DataListFragment injectDataListFragment(DataListFragment instance) {
        DataListFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
